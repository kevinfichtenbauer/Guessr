@page "/NormalMode"
@using Model.Configurations
@using Model.Entities
@rendermode InteractiveServer
@inject SharedClass SharedService

<h3>Hangman Game</h3>

<div style="display: flex; justify-content: space-between;">
    <div>
        <strong>Name:</strong> @SharedService.SharedUser.Name
    </div>
    <div>
        <strong>Score:</strong> @score
    </div>
</div>
@if (!gameStarted)
{
    <div>
        <label for="themeSelect">Thema auswählen:</label>
        <select id="themeSelect" @onchange="UpdateSelectedTheme">
            <option class="text-muted">Fach auswählen</option>
            @foreach (var theme in _context.GetThemesSeperated())
            {
                <option value="@theme.Subject">@theme.Subject</option>
            }
        </select>
        <button @onclick="StartGame" disabled="@(!IsValidStart())">Spiel starten</button>
    </div>
}
else
{
    <div>
        <h4>Thema: @selectedTheme</h4>
        <p>
            @foreach (char letter in currentWord.ToCharArray())
            {
                if (guessedLetters.Contains(letter))
                {
                    <span>@letter</span>
                }
                else
                {
                    <span>_ </span>
                }
            }
        </p>
        <p>Erratene Buchstaben: @string.Join(", ", guessedLetters)</p>
        <input type="text" @bind="currentGuess" maxlength="1"/>
        <button @onclick="CheckLetter">Buchstabe raten</button>
        <button @onclick="GiveUp">Aufgeben</button>
        <p>@currentStatusMessage</p>
        @if (gameWon)
        {
            <p>Congratulations! Du hast das Wort richtig geraten: @currentWord</p>
            gameWon = true;
            Console.WriteLine(SharedService.SharedUser.Name);
            SharedService.SharedUser.HighScore = score;
            Console.WriteLine(SharedService.SharedUser.HighScore);
            SaveUserData();
        }
        @if (gameLost)
        {
            <p>Game Over! Das geheime Wort war: @currentWord</p>
        }
        <img src="hangmans/@GetHangmanDisplay(attemptsLeft)"/>
    </div>
}

@code {
    public GuessrContext _context = new GuessrContext();
    public bool gameStarted = false;
    public string selectedTheme = "";
    public string currentWord = "";
    public List<char> guessedLetters = new List<char>();
    public string currentGuess = "";
    public string currentStatusMessage = "";
    public int maxAttempts = 6; // Maximale Anzahl von Versuchen

    public bool gameWon = false;
    public bool gameLost = false;
    public int attemptsLeft;
    
    public int score = 0;
    
    private void UpdateSelectedTheme(ChangeEventArgs e)
    {
        selectedTheme = e.Value.ToString();
    }
    public void StartGame()
    {
        if (!string.IsNullOrEmpty(selectedTheme))
        {
            currentWord = GetRandomWord().ToUpper(); // Wort in Großbuchstaben für einfache Vergleiche
            gameStarted = true;
            currentStatusMessage = "";
            guessedLetters.Clear();
            currentGuess = "";
            attemptsLeft = maxAttempts;
            gameWon = false;
            gameLost = false;
            StateHasChanged(); // Ensure the state is updated
        }
    }
    public void SaveUserData()
    {
        _context.SaveNormalScore(SharedService.SharedUser);
    }
    public string GetRandomWord()
    {
        List<Words> words = _context.GetWords(selectedTheme);
        foreach (var VARIABLE in words)
        {
            Console.WriteLine(VARIABLE.Word);
        }
        Random rnd = new Random();
        int i = rnd.Next(0, words.Count-1);
        string _currentWord = words[i].Word;
        return words[0].Word;
    }

    public void CheckLetter()
    {
        if (!gameWon && !gameLost)
        {
            if (!string.IsNullOrEmpty(currentGuess) && currentGuess.Length == 1)
            {
                char guessedLetter = char.ToUpper(currentGuess[0]);
                if (!guessedLetters.Contains(guessedLetter))
                {
                    guessedLetters.Add(guessedLetter);
                    if (currentWord.Contains(guessedLetter))
                    {
                       
                        currentStatusMessage = $"Gut geraten! Der Buchstabe '{guessedLetter}' ist im Wort enthalten.";
                        score += 3;
                    }
                    else
                    {
                        currentStatusMessage = $"Leider falsch. Der Buchstabe '{guessedLetter}' ist nicht im Wort enthalten.";
                        attemptsLeft--;
                        score -= 1;
                    }
                }
                else
                {
                    currentStatusMessage = $"Du hast den Buchstaben '{guessedLetter}' bereits geraten.";
                }

                if (GuessesContainWord(currentWord, guessedLetters))
                {
                    gameWon = true;
                    score += 10;
                }

                if (attemptsLeft == 0)
                {
                    gameLost = true;
                    score -= 5;
                }
            }
            else
            {
                currentStatusMessage = "Bitte gib einen einzelnen Buchstaben ein.";
            }

            currentGuess = "";
            StateHasChanged(); // Ensure the state is updated
        }
    }

    public bool GuessesContainWord(string currentWord, List<char> guessedLetters)
    {
        foreach (var letter in currentWord)
        {
            if (!guessedLetters.Contains(letter))
                return false;
        }
        return true;
    }

    public void GiveUp()
    {
        gameStarted = false;
        selectedTheme = "";
        currentWord = "";
        guessedLetters.Clear();
        currentGuess = "";
        currentStatusMessage = "";
        gameWon = false;
        gameLost = false;
        StateHasChanged(); // Ensure the state is updated
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public string GetHangmanDisplay(int attemptsLeft)
    {
        List<string> hangmanImages = new List<string>()
        {
            "0.png", "1.png", "2.png", "3.png", "4.png", "5.png", "6.png"
        };

        int index = maxAttempts - attemptsLeft;
        if (index >= 0 && index < hangmanImages.Count)
        {
            return hangmanImages[index];
        }
        return hangmanImages[0]; // Default image if index is out of bounds
    }
    

    public bool IsValidStart()
    {
        return !string.IsNullOrEmpty(selectedTheme);
    }

// Hier könntest du zusätzliche Methoden für die Implementierung des Zeitmodus und anpassbarer Einstellungen hinzufügen
}
@foreach (var word in _context.GetWords(selectedTheme))
{
    <div>@word.Word</div>
}
