@page "/TimeMode"

@using Model.Configurations
@using Model.Entities
@rendermode InteractiveServer
@inject SharedClass SharedService
@inject NavigationManager manager

<div id="obercontainer">
    <div id="container">
        <div id="header">
            <div class="header-item">
                <select id="themeSelect" @onchange="UpdateSelectedTheme">
                    <option class="text-muted">Thema auswählen</option>
                    @foreach (var theme in _context.GetThemesSeperated())
                    {
                        <option value="@theme.Subject">@theme.Subject</option>
                    }
                </select>
            </div>
            <div class="header-item">
                <select id="themeSelect" @onchange="UpdateSelectedDifficulty">
                    <option class="text-muted">Schwierigkeit</option>
                    <option value="leicht">Leicht</option>
                    <option value="mittel">Mittel</option>
                    <option value="schwer">Schwer</option>
                </select>
            </div>
            <div class="header-item">
                <strong>Name:</strong> @SharedService.SharedUser.Name
            </div>
            @if (SharedService.playedAgain == true)
            {
                <div class="header-item">
                    <strong>Score: </strong> @SharedService.SavedScore
                </div>
                <div class="header-item">
                    <strong>Verbleibende Zeit:</strong>@SharedService.RemainingTime
                </div>
            }
            else
            {
                <div class="header-item">
                    <strong>Score: </strong> @score
                </div>
                <div class="header-item">
                    <strong>Verbleibende Zeit:</strong>@remainingTime
                </div>
            }
        </div>
        @if (!gameStarted)
        {
            <div id="start-btn">
                <div>
                    <button class="start-btn" @onclick="StartGame" disabled="@(!IsValidStart())">Spiel starten</button>
                </div>
            </div>
        }
        else
        {
            <div class="guessedWord">
                @foreach (char letter in currentWord.ToCharArray())
                {
                    if (guessedLetters.Contains(letter))
                    {
                        <span>@letter</span>
                    }
                    else
                    {
                        <span>_ </span>
                    }
                }
            </div>
            <div class="guessing">
                <div class="letters">
                    <div style="font-size: xx-large;margin-top: 10px;">Buchstabe eingeben</div>
                    <input type="text" style="margin-top: 10px;" @bind="currentGuess" maxlength="1"/>
                    <button class="btn-blue" style="margin-top: 10px;" @onclick="CheckLetter">Buchstabe raten</button>
                    <button class="btn-blue" style="margin-top: 10px;" @onclick="GiveUp">Aufgeben</button>
                    <div class="wrap text-current" style="text-align: center; margin-top: 5px;">@currentStatusMessage</div>
                    @if (timeMode)
                    {
                        <p>Verbleibende Zeit: @remainingTime seconds</p>
                    }
                    @if (gameWon)
                    {
                        <p class="wrap">Congratulations! Du hast das Wort richtig geraten: @currentWord</p>
                        gameWon = true;
                        if (SharedService.playedAgain == true && (SharedService.SavedScore > SharedService.SharedUser.TimeHighScore || SharedService.TimeSavedSec < SharedService.SharedUser.HighScoreSec))
                        {
                            SharedService.SharedUser.TimeHighScore = SharedService.SavedScore;
                            SharedService.SharedUser.HighScoreSec = SharedService.TimeSavedSec;
                        }
                    
                        if (score > SharedService.SharedUser.TimeHighScore || elapsedTime < SharedService.SharedUser.HighScoreSec)
                        {
                            SharedService.SharedUser.TimeHighScore = score;
                            SharedService.SharedUser.HighScoreSec = elapsedTime;
                        }
                    
                        SaveUserData();
                    }
                    @if (gameLost)
                    {
                        <p>Game Over! Das geheime Wort war: @currentWord</p>
                    }
                    <img src="hangmans/@GetHangmanDisplay(attemptsLeft)"/>
                </div>
                <div class="used-letters">
                    <div style="font-size: xx-large">Verwendete Buchstaben</div>
                    <p style="text-align: center;">@string.Join(",", guessedLetters)</p>
                </div>
            </div>
        }
        <div class="downbuttons">
            <button class="btn-blue" style="margin:10px;" @onclick="Again" disabled="@(gameWon == false)">Weiterspielen</button>
            <button class="btn-blue" style="margin:10px;"@onclick="End">Beenden</button>
        </div>
    </div>
</div>
@code {
    public GuessrContext _context = new GuessrContext();
    public bool gameStarted = false;
    public string selectedTheme = "";
    public string currentWord = "";
    public List<char> guessedLetters = new List<char>();
    public string currentGuess = "";
    public string currentStatusMessage = "";
    public bool timeMode = false;
    public int remainingTime = 60; // Zeit in Sekunden (kann angepasst werden)
    public int maxAttempts = 6; // Maximale Anzahl von Versuchen
    public EDIFFICULTY Difficulty = EDIFFICULTY.none;

    public bool gameWon = false;
    public bool gameLost = false;
    public int attemptsLeft;

    public int score = 0;

    public Timer timer;
    public int elapsedTime;

    private void UpdateSelectedDifficulty(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "leicht")
        {
            Difficulty = EDIFFICULTY.EASY;
        }

        if (e.Value.ToString() == "mittel")
        {
            Difficulty = EDIFFICULTY.MEDIUM;
        }

        if (e.Value.ToString() == "schwer")
        {
            Difficulty = EDIFFICULTY.HARD;
        }
    }

    public void SaveUserData()
    {
        _context.SaveTimeScore(SharedService.SharedUser);
    }

    private void UpdateSelectedTheme(ChangeEventArgs e)
    {
        selectedTheme = e.Value.ToString();
    }

    public void StartGame()
    {
        if (SharedService.playedAgain == true)
        {
            score = SharedService.SavedScore;
            remainingTime = SharedService.RemainingTime;
            elapsedTime = SharedService.elapsedSavedTime;
        }
        else
        {
            score = 0;
            elapsedTime = 0;
        }

        if (!string.IsNullOrEmpty(selectedTheme) && remainingTime > 0)
        {
            currentWord = GetRandomWord().ToUpper();
            gameStarted = true;
            currentStatusMessage = "";
            guessedLetters.Clear();
            currentGuess = "";
            attemptsLeft = maxAttempts;
            gameWon = false;
            gameLost = false;
            timer?.Dispose();
            timer = new Timer(TimerTick, null, 1000, 1000);
            StateHasChanged();
        }
    }

    public string GetRandomWord()
    {
        List<Words> words = _context.GetWords(selectedTheme);
        var grouped = words.OrderBy(s => s.Difficulty).GroupBy(s => s.Difficulty).Select(s =>
            new { Diff = s.Key, sorted = s.ToList() });
        Random rnd = new Random();
        foreach (var x in grouped)
        {
            if (Difficulty == EDIFFICULTY.EASY)
            {
                var list = x.sorted.Where(s => s.Difficulty == EDIFFICULTY.EASY).Select(s => new { wo = s.Word, di = s.Difficulty }).ToList();
                if (list.Count > 0)
                {
                    int i = rnd.Next(0, list.Count);
                    Console.WriteLine(list[i].wo + " " + list[i].di);
                    return list[i].wo;
                }
            }
            else if (Difficulty == EDIFFICULTY.MEDIUM)
            {
                var list = x.sorted.Where(s => s.Difficulty == EDIFFICULTY.MEDIUM).Select(s => new { wo = s.Word, di = s.Difficulty }).ToList();
                if (list.Count > 0)
                {
                    int i = rnd.Next(0, list.Count);
                    Console.WriteLine(list[i].wo + " " + list[i].di);
                    return list[i].wo;
                }
            }
            else if (Difficulty == EDIFFICULTY.HARD)
            {
                var list = x.sorted.Where(s => s.Difficulty == EDIFFICULTY.HARD).Select(s => new { wo = s.Word, di = s.Difficulty }).ToList();
                if (list.Count > 0)
                {
                    int i = rnd.Next(0, list.Count);
                    Console.WriteLine(list[i].wo + " " + list[i].di);
                    return list[i].wo;
                }
            }
        }
        return "1";
    }

    public void CheckLetter()
    {
        if (SharedService.playedAgain == false)
        {
            if (!gameWon && !gameLost)
            {
                if (!string.IsNullOrEmpty(currentGuess) && currentGuess.Length == 1)
                {
                    char guessedLetter = char.ToUpper(currentGuess[0]);
                    if (!guessedLetters.Contains(guessedLetter))
                    {
                        guessedLetters.Add(guessedLetter);
                        if (currentWord.Contains(guessedLetter))
                        {
                            int timePenalty = (int)Math.Floor((double)elapsedTime / 10); // Reduce points based on time taken
                            currentStatusMessage = $"Gut geraten! Der Buchstabe '{guessedLetter}' ist im Wort enthalten.";
                            score += Math.Max(1, 3 - timePenalty);
                        }
                        else
                        {
                            currentStatusMessage = $"Leider falsch. Der Buchstabe '{guessedLetter}' ist nicht im Wort enthalten.";
                            attemptsLeft--;
                            score -= 1;
                        }
                    }
                    else
                    {
                        currentStatusMessage = $"Du hast den Buchstaben '{guessedLetter}' bereits geraten.";
                    }

                    if (GuessesContainWord(currentWord, guessedLetters))
                    {
                        gameWon = true;
                        score += 10;
                        timer?.Dispose();
                    }

                    if (attemptsLeft == 0)
                    {
                        gameLost = true;
                        score -= 5;
                        timer?.Dispose();
                    }
                }
                else
                {
                    currentStatusMessage = "Bitte gib einen einzelnen Buchstaben ein.";
                }
            }

            currentGuess = "";
            InvokeAsync(StateHasChanged);
        }
        else
        {
            if (!gameWon && !gameLost)
            {
                if (!string.IsNullOrEmpty(currentGuess) && currentGuess.Length == 1)
                {
                    char guessedLetter = char.ToUpper(currentGuess[0]);
                    if (!guessedLetters.Contains(guessedLetter))
                    {
                        guessedLetters.Add(guessedLetter);
                        if (currentWord.Contains(guessedLetter))
                        {
                            int timePenalty = (int)Math.Floor((double)elapsedTime / 10); // Reduce points based on time taken
                            currentStatusMessage = $"Gut geraten! Der Buchstabe '{guessedLetter}' ist im Wort enthalten.";
                            SharedService.SavedScore += Math.Max(1, 3 - timePenalty);
                        }
                        else
                        {
                            currentStatusMessage = $"Leider falsch. Der Buchstabe '{guessedLetter}' ist nicht im Wort enthalten.";
                            attemptsLeft--;
                            SharedService.SavedScore -= 1;
                        }
                    }
                    else
                    {
                        currentStatusMessage = $"Du hast den Buchstaben '{guessedLetter}' bereits geraten.";
                    }

                    if (GuessesContainWord(currentWord, guessedLetters))
                    {
                        gameWon = true;
                        SharedService.SavedScore += 10;
                        timer?.Dispose();
                    }

                    if (attemptsLeft == 0)
                    {
                        gameLost = true;
                        SharedService.SavedScore -= 5;
                        timer?.Dispose();
                    }
                }
                else
                {
                    currentStatusMessage = "Bitte gib einen einzelnen Buchstaben ein.";
                }
            }

            currentGuess = "";
            InvokeAsync(StateHasChanged);
        }
    }

    public bool GuessesContainWord(string currentWord, List<char> guessedLetters)
    {
        foreach (var letter in currentWord)
        {
            if (!guessedLetters.Contains(letter))
                return false;
        }

        return true;
    }

    public void GiveUp()
    {
        Difficulty = EDIFFICULTY.none;
        gameStarted = false;
        selectedTheme = "";
        currentWord = "";
        guessedLetters.Clear();
        currentGuess = "";
        currentStatusMessage = "";
        gameWon = false;
        gameLost = false;
        SharedService.SavedScore = 0;
        SharedService.TimeSavedSec = 0;
        SharedService.playedAgain = false;
        timer?.Dispose();
        StateHasChanged(); // Ensure the state is updated
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public string GetHangmanDisplay(int attemptsLeft)
    {
        List<string> hangmanImages = new List<string>()
        {
            "0.png", "1.png", "2.png", "3.png", "4.png", "5.png", "6.png"
        };

        int index = maxAttempts - attemptsLeft;
        if (index >= 0 && index < hangmanImages.Count)
        {
            return hangmanImages[index];
        }

        return hangmanImages[0]; // Default image if index is out of bounds
    }

    public void TimerTick(object state)
    {
        if (SharedService.playedAgain == false)
        {
            if (gameStarted && remainingTime > 0)
            {
                remainingTime--;
                elapsedTime++;
                if (remainingTime == 0)
                {
                    gameLost = true;
                    currentStatusMessage = "Zeit abgelaufen! Du hast verloren.";
                    timer?.Dispose();
                }

                InvokeAsync(() => { StateHasChanged(); });
            }
        }
        else
        {
            if (gameStarted && SharedService.RemainingTime > 0)
            {
                SharedService.RemainingTime--;
                SharedService.elapsedSavedTime++;
                if (SharedService.RemainingTime == 0)
                {
                    gameLost = true;
                    currentStatusMessage = "Zeit abgelaufen! Du hast verloren.";
                    timer?.Dispose();
                }

                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    public bool IsValidStart()
    {
        return !string.IsNullOrEmpty(selectedTheme) && remainingTime > 0;
    }

    public void Again()
    {
        SharedService.SavedScore = score;
        SharedService.RemainingTime = remainingTime;
        SharedService.elapsedSavedTime = elapsedTime;
        SharedService.playedAgain = true;
        if (SharedService.SavedScore > SharedService.SharedUser.TimeHighScore || SharedService.elapsedSavedTime < SharedService.SharedUser.HighScoreSec)
        {
            SharedService.SharedUser.TimeHighScore = SharedService.SavedScore;
            SharedService.SharedUser.HighScoreSec = SharedService.elapsedSavedTime;
        }

        SaveUserData();
        StateHasChanged(); // Ensure the state is updated before navigation
        manager.NavigateTo("/TimeMode", true);
    }

    public void End()
    {
        Console.WriteLine(SharedService.SharedUser.TimeHighScore);
        Console.WriteLine(SharedService.SavedScore);
        Console.WriteLine(SharedService.TimeSavedSec);
        if (SharedService.SharedUser.TimeHighScore == 0 || SharedService.SharedUser.HighScoreSec == 0)
        {
            SharedService.SharedUser.TimeHighScore = SharedService.SavedScore;
            SharedService.SharedUser.HighScoreSec = SharedService.elapsedSavedTime;
        }

        if (SharedService.SavedScore > SharedService.SharedUser.TimeHighScore || SharedService.elapsedSavedTime < SharedService.SharedUser.HighScoreSec)
        {
            SharedService.SharedUser.TimeHighScore = SharedService.SavedScore;
            SharedService.SharedUser.HighScoreSec = SharedService.elapsedSavedTime;
        }

        SaveUserData();
        manager.NavigateTo("/Scoreboard", true);
        StateHasChanged();
    }

// Hier könntest du zusätzliche Methoden für die Implementierung des Zeitmodus und anpassbarer Einstellungen hinzufügen
}
